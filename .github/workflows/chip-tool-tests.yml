# This workflow executes the chip tool tests against matter.js (Dockerized and not dockerized ones)
# This workflow is triggered by:
# * A schedule (every day at 5am UTC)
# * A manual trigger
# * For commits and pull requests to the main branch

name: Chip Tool tests

on:
  schedule:
    - cron: 0 5 * * * # Every day at 05:00
  workflow_dispatch: # Manually on demand
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  merge_group:

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}-chip-tool-tests
  cancel-in-progress: true

jobs:
  head-commit-message:
    name: get head commit message
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get_head_commit_message.outputs.headCommitMsg }}
    steps:
      - name: Get repo
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "headCommitMsg=$(git show -s --format=%s)" >> $GITHUB_OUTPUT

  # Find out what is needed to be done by this test workflow
  chip-tests-needed:
    needs: [head-commit-message]
    if: github.repository == 'matter-js/matter.js'
    runs-on: ubuntu-latest
    outputs:
      chip-changes: ${{ steps.changes.outputs.src }}
      chip-tests-required: ${{ steps.check-trigger.outputs.chip-tests-required || steps.check-rebuild.outputs.chip-tests-required || steps.check-long-tests.outputs.chip-tests-required  }}
      chip-tool-rebuild: ${{ steps.check-rebuild.outputs.chip-tool-rebuild }}
      chip-app-tests-required: ${{ steps.check-long-tests.outputs.chip-app-tests-required }}
      chip-long-tests-required: ${{ steps.check-long-tests.outputs.chip-long-tests-required }}
      chip-slowapp-tests-required: ${{ steps.check-long-tests.outputs.chip-slowapp-tests-required || steps.check-slowapp-tests.outputs.chip-slowapp-tests-required }}
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - "chip-testing/**"
              - ".github/workflows/chip-tool-tests.yml"
              - "package.json"
              - "packages/**/package.json"
              - "packages/**/src/**"
              - "!packages/node/src/behaviors/"
              - "!packages/react-native/**"
              - "!packages/nodejs-ble/**"
              - "!packages/nodejs-shell/**"
              - "!packages/examples/**"
              - "!packages/tools/**"
            app-tests:
              - "packages/node/src/behaviors/"
            slowapp-tests:
              - "packages/node/src/behaviors/color-control/**"
              - "packages/node/src/behaviors/level-control/**"
              - "packages/node/src/behaviors/window-covering/**"
              - "packages/types/src/clusters/definitions/ColorControlCluster.ts"
              - "packages/types/src/clusters/definitions/LevelControlCluster.ts"
              - "packages/types/src/clusters/definitions/WindowCoveringCluster.ts"
            long-tests:
              - "packages/node/src/behaviors/administrator-commissioning/**"
              - "packages/node/src/behaviors/general-commissioning/**"
              - "packages/node/src/behaviors/operational-credentials/**"
              - "packages/protocol/src/session/pase/**"
              - "packages/protocol/src/session/case/**"
              - "packages/protocol/src/mdns/**"
              - "packages/protocol/src/interaction/**"
              - "packages/protocol/src/fabric/**"
              - "packages/protocol/src/securechannel/**"

      - if: ${{ github.event_name == 'schedule' || ((github.event_name == 'push' || github.event_name == 'pull_request') && steps.changes.outputs.src == 'true') || github.event_name == 'workflow_dispatch' || contains(needs.head-commit-message.outputs.head-commit-message, '[execute-chiptests]') == true }}
        name: Chip Tool tests required to run?
        id: check-trigger
        run: echo "chip-tests-required=true" >> $GITHUB_OUTPUT

      - if: ${{ (github.event_name != 'schedule' && (steps.changes.outputs.app-tests == 'true' || contains(needs.head-commit-message.outputs.head-commit-message, '[execute-chiptests-long]') == true)) }}
        name: Enable App tests if needed
        id: check-app-tests
        run: |
          echo "chip-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-app-tests-required=true" >> $GITHUB_OUTPUT

      - if: ${{ (github.event_name != 'schedule' && (steps.changes.outputs.slowapp-tests == 'true' || contains(needs.head-commit-message.outputs.head-commit-message, '[execute-chiptests-long]') == true)) }}
        name: Enable slow App tests if needed
        id: check-slowapp-tests
        run: |
          echo "chip-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-app-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-slowapp-tests-required=true" >> $GITHUB_OUTPUT

      - if: ${{ contains(github.event.head_commit.message, '[rebuild-chip]') == true }}
        name: Chip Tool rebuild required?
        id: check-rebuild
        run: |
          echo "chip-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-tool-rebuild=true" >> $GITHUB_OUTPUT

      - name: Get Day of the week
        run: echo "DOW=$(date +%u)" >> $GITHUB_ENV

      - if: ${{ (env.DOW == 6 && github.event_name == 'schedule') || (github.event_name != 'schedule' && (steps.changes.outputs.long-tests == 'true' || contains(needs.head-commit-message.outputs.head-commit-message, '[execute-chiptests-long]') == true)) }}
        name: Enable Long tests if needed
        id: check-long-tests
        run: |
          echo "chip-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-app-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-slowapp-tests-required=true" >> $GITHUB_OUTPUT
          echo "chip-long-tests-required=true" >> $GITHUB_OUTPUT

  # If we need to do anything make sure that chip binaries are build and environment can be set up
  prepare-chip-build:
    needs: [chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Prepare chip tests and rebuild chip-tool if needed
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: ${{ needs.chip-tests-needed.outputs.chip-tool-rebuild }}
          build-matter-js: "false"

  # Execute the core cluster tests
  chip-tests-core:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: "false"
          patch-test-yaml: "true"

      - name: Run Core cluster tests using the python parser sending commands to chip-tool from yaml files
        id: test-execution-08-core
        shell: bash
        run: |
          cd connectedhomeip
          ./scripts/run_in_build_env.sh  \
            './scripts/tests/run_test_suite.py \
              --runner chip_tool_python \
              --chip-tool ../bin/chip-tool \
              --log-level debug \
              --target-glob "{TestSelfFabricRemoval}" \
              run \
              --iterations 1 \
              --all-clusters-app ../support/chip-testing/AllClustersTestApp.sh \
              --bridge-app ../support/chip-testing/dist/esm/BridgeTestApp.js \
              --tv-app ../support/chip-testing/dist/esm/TvTestApp.js \
            || (cat ./test_allclusters.log && exit 1)'
          


  matterjs-tests-core:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: "false"
          patch-test-yaml: "true"

      - name: Run Core cluster tests using the python parser sending commands to matter.js-controller from yaml files
        id: test-execution-08-core-matterjs
        shell: bash
        run: |
          cd connectedhomeip
          ./scripts/run_in_build_env.sh  \
            './scripts/tests/run_test_suite.py \
              --runner chip_tool_python \
              --chip-tool ../support/chip-testing/dist/esm/ControllerWebSocketTestApp.js \
              --log-level debug \
              --target-glob "{TestSelfFabricRemoval}" \
              run \
              --iterations 1 \
              --all-clusters-app ../support/chip-testing/AllClustersTestApp.sh \
              --bridge-app ../support/chip-testing/dist/esm/BridgeTestApp.js \
              --tv-app ../support/chip-testing/dist/esm/TvTestApp.js \
             || (cat ./test_allclusters.log && exit 1)'
          

  # Execute the fast application cluster tests
  chip-tests-app-fast:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true' || needs.chip-tests-needed.outputs.chip-app-tests-required == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: "false"
          patch-test-yaml: "true"

      - name: Run fast application cluster tests using the python parser sending commands to chip-tool from yaml files
        id: test-execution-08-app-fast
        shell: bash
        run: |
          cd connectedhomeip
          

  matterjs-tests-app-fast:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true' || needs.chip-tests-needed.outputs.chip-app-tests-required == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: "false"
          patch-test-yaml: "true"

      - name: Run fast application cluster tests using the python parser sending commands to matter.js-controller from yaml files
        id: test-execution-08-app-fast
        shell: bash
        run: |
          cd connectedhomeip
          

  # Execute the slower (because simulated) application cluster tests
  chip-tests-app-slow:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-slowapp-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-long-tests-required == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: "false"
          patch-test-yaml: "true"

      - name: Run slower application cluster tests using the python parser sending commands to chip-tool from yaml files
        id: test-execution-08-app-slow
        shell: bash
        run: |
          cd connectedhomeip
          

  chip-tests-long:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && needs.chip-tests-needed.outputs.chip-long-tests-required == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: 'false'
          patch-test-yaml: "true"

      - name: Long Test execution
        id: test-execution-long-08
        shell: bash
        run: |
          cd connectedhomeip

  matterjs-tests-long:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && needs.chip-tests-needed.outputs.chip-long-tests-required == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: 'false'
          patch-test-yaml: "true"

      - name: Long Test execution with matter.js controller
        id: test-execution-long-08
        shell: bash
        run: |
          cd connectedhomeip
          

  python-repl-tests-core:
    needs: [prepare-chip-build, chip-tests-needed]
    if: ${{ github.repository == 'matter-js/matter.js' && (needs.chip-tests-needed.outputs.chip-tool-rebuild == 'true' || needs.chip-tests-needed.outputs.chip-tests-required == 'true' || needs.chip-tests-needed.outputs.chip-changes == 'true' || needs.chip-tests-needed.outputs.chip-long-tests-required == 'true') }}
    env:
      TSAN_OPTIONS: "halt_on_error=1 suppressions=scripts/tests/chiptest/tsan-linux-suppressions.txt"
    runs-on: ubuntu-latest
    steps:
      - name: Check out matter.js
        uses: actions/checkout@v5

      - name: Initialize chip tests
        uses: ./.github/actions/prepare-chip-testing
        with:
          rebuild-chip-tool: 'false'
          patch-test-yaml: "true"

      - name: Generate an argument environment file
        run: |
          echo -n "" >/tmp/test_env.yaml
          echo "ALL_CLUSTERS_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "CHIP_LOCK_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "ENERGY_MANAGEMENT_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "LIT_ICD_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "CHIP_MICROWAVE_OVEN_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "CHIP_RVC_APP: ../support/chip-testing/dist/esm/RvcTestApp.js" >> /tmp/test_env.yaml
          echo "NETWORK_MANAGEMENT_APP: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "LIGHTING_APP_NO_UNIQUE_ID: ../support/chip-testing/dist/esm/AllClustersTestApp.js" >> /tmp/test_env.yaml
          echo "TRACE_APP: out/trace_data/app-{SCRIPT_BASE_NAME}" >> /tmp/test_env.yaml
          echo "TRACE_TEST_JSON: out/trace_data/test-{SCRIPT_BASE_NAME}" >> /tmp/test_env.yaml
          echo "TRACE_TEST_PERFETTO: out/trace_data/test-{SCRIPT_BASE_NAME}" >> /tmp/test_env.yaml

      # Remove once https://github.com/project-chip/connectedhomeip/pull/38788 got merged + 1 day
      - name: Patch Test runner backchannel waiting times
        uses: actions/github-script@v8
        with:
          result-encoding: string
          script: |
            const fs = require("fs");
            let file= fs.readFileSync("./connectedhomeip/src/python_testing/matter_testing_infrastructure/matter/testing/matter_testing.py", "utf8");
            // Patch the test runner to execute controller and app on same network interface
            file = file.replaceAll("sleep(0.001)", "sleep(0.05)");
            fs.writeFileSync("./connectedhomeip/src/python_testing/matter_testing_infrastructure/matter/testing/matter_testing.py", file);

      # remove once https://github.com/project-chip/connectedhomeip/issues/33735 is clarified
      - name: Patch ACE 2.2 testcase
        uses: actions/github-script@v8
        with:
          result-encoding: string
          script: |
            const fs = require("fs");
            let file= fs.readFileSync("./connectedhomeip/src/python_testing/TC_AccessChecker.py", "utf8");
            // Patch the test runner to execute controller and app on same network interface
            file = file.replace("if resp[0].Status != Status.UnsupportedWrite:", "if (resp[0].Status != Status.UnsupportedWrite and resp[0].Status != Status.UnsupportedAccess):");
            fs.writeFileSync("./connectedhomeip/src/python_testing/TC_AccessChecker.py", file);

      - name: Run Tests
        id: python-tests-08
        shell: bash
        run: |
          cd connectedhomeip
          
